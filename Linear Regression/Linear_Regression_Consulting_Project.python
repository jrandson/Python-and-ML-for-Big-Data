{"version":"NotebookV1","origId":2581020348981793,"name":"Linear_Regression_Consulting_Project","language":"python","commands":[{"version":"CommandV1","origId":284330860034168,"guid":"4ebd72c8-53ff-49f3-8fad-fdafb3a4e786","subtype":"command","commandType":"auto","position":14.5,"command":"test_data.show()","commandVersion":0,"state":"error","results":{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":"<span class=\"ansired\">NameError</span>: name &apos;test_data&apos; is not defined","error":"<div class=\"ansiout\"><span class=\"ansired\">---------------------------------------------------------------------------</span>\n<span class=\"ansired\">NameError</span>                                 Traceback (most recent call last)\n<span class=\"ansigreen\">&lt;command-284330860034168&gt;</span> in <span class=\"ansicyan\">&lt;module&gt;</span><span class=\"ansiblue\">()</span>\n<span class=\"ansigreen\">----&gt; 1</span><span class=\"ansiyellow\"> </span>test_data<span class=\"ansiyellow\">.</span>show<span class=\"ansiyellow\">(</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n\n<span class=\"ansired\">NameError</span>: name &apos;test_data&apos; is not defined</div>","workflows":[],"startTime":1515938829082,"submitTime":1515938829082,"finishTime":1515938829498,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"jrandson@gmail.com","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"8fdad28f-92b4-4624-b31f-15dba176cfbf"},{"version":"CommandV1","origId":2041609508916547,"guid":"8f4f61ce-9993-4a70-b24a-848eaf0e8720","subtype":"command","commandType":"auto","position":3.0,"command":"from pyspark.sql import SparkSession\nspark = SparkSession.builder.appName(\"Hyundai Heavy Industries\").getOrCreate()\nfrom pyspark.ml.regression import LinearRegression","commandVersion":0,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":"<span class=\"ansired\">ImportError</span>: No module named pysaprk.sql","error":null,"workflows":[],"startTime":1515852686801,"submitTime":1515852653207,"finishTime":1515852687014,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"jrandson@gmail.com","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"3bd9120f-fc7b-410c-b258-6df6393ee1bd"},{"version":"CommandV1","origId":2041609508916550,"guid":"26a76c5c-6f03-4fd7-b60f-269f0b88ed77","subtype":"command","commandType":"auto","position":4.0,"command":"data = spark.read.csv(\"/FileStore/tables/cruise_ship_info.csv\", header=True, inferSchema=True)\ndata.show()","commandVersion":0,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\">+-----------+-----------+---+------------------+----------+------+------+-----------------+----+\n|  Ship_name|Cruise_line|Age|           Tonnage|passengers|length|cabins|passenger_density|crew|\n+-----------+-----------+---+------------------+----------+------+------+-----------------+----+\n|    Journey|    Azamara|  6|30.276999999999997|      6.94|  5.94|  3.55|            42.64|3.55|\n|      Quest|    Azamara|  6|30.276999999999997|      6.94|  5.94|  3.55|            42.64|3.55|\n|Celebration|   Carnival| 26|            47.262|     14.86|  7.22|  7.43|             31.8| 6.7|\n|   Conquest|   Carnival| 11|             110.0|     29.74|  9.53| 14.88|            36.99|19.1|\n|    Destiny|   Carnival| 17|           101.353|     26.42|  8.92| 13.21|            38.36|10.0|\n|    Ecstasy|   Carnival| 22|            70.367|     20.52|  8.55|  10.2|            34.29| 9.2|\n|    Elation|   Carnival| 15|            70.367|     20.52|  8.55|  10.2|            34.29| 9.2|\n|    Fantasy|   Carnival| 23|            70.367|     20.56|  8.55| 10.22|            34.23| 9.2|\n|Fascination|   Carnival| 19|            70.367|     20.52|  8.55|  10.2|            34.29| 9.2|\n|    Freedom|   Carnival|  6|110.23899999999999|      37.0|  9.51| 14.87|            29.79|11.5|\n|      Glory|   Carnival| 10|             110.0|     29.74|  9.51| 14.87|            36.99|11.6|\n|    Holiday|   Carnival| 28|            46.052|     14.52|  7.27|  7.26|            31.72| 6.6|\n|Imagination|   Carnival| 18|            70.367|     20.52|  8.55|  10.2|            34.29| 9.2|\n|Inspiration|   Carnival| 17|            70.367|     20.52|  8.55|  10.2|            34.29| 9.2|\n|     Legend|   Carnival| 11|              86.0|     21.24|  9.63| 10.62|            40.49| 9.3|\n|   Liberty*|   Carnival|  8|             110.0|     29.74|  9.51| 14.87|            36.99|11.6|\n|    Miracle|   Carnival|  9|              88.5|     21.24|  9.63| 10.62|            41.67|10.3|\n|   Paradise|   Carnival| 15|            70.367|     20.52|  8.55|  10.2|            34.29| 9.2|\n|      Pride|   Carnival| 12|              88.5|     21.24|  9.63| 11.62|            41.67| 9.3|\n|  Sensation|   Carnival| 20|            70.367|     20.52|  8.55|  10.2|            34.29| 9.2|\n+-----------+-----------+---+------------------+----------+------+------+-----------------+----+\nonly showing top 20 rows\n\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[{"name":"data","typeStr":"pyspark.sql.dataframe.DataFrame","schema":{"fields":[{"metadata":{},"name":"Ship_name","nullable":true,"type":"string"},{"metadata":{},"name":"Cruise_line","nullable":true,"type":"string"},{"metadata":{},"name":"Age","nullable":true,"type":"integer"},{"metadata":{},"name":"Tonnage","nullable":true,"type":"double"},{"metadata":{},"name":"passengers","nullable":true,"type":"double"},{"metadata":{},"name":"length","nullable":true,"type":"double"},{"metadata":{},"name":"cabins","nullable":true,"type":"double"},{"metadata":{},"name":"passenger_density","nullable":true,"type":"double"},{"metadata":{},"name":"crew","nullable":true,"type":"double"}],"type":"struct"},"tableIdentifier":null}]},"errorSummary":null,"error":null,"workflows":[],"startTime":1515852701715,"submitTime":1515852701705,"finishTime":1515852705864,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"jrandson@gmail.com","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"6b8f580a-ff78-4755-839f-4c0511faca51"},{"version":"CommandV1","origId":2041609508916551,"guid":"ef5f4bf4-eda1-4fb2-894b-b61fb2643378","subtype":"command","commandType":"auto","position":5.0,"command":"from pyspark.sql.functions import udf\n\ncruise_line = {}\ni = 0\nfor item in cruise_line_df.take(cruise_line_df.count()):\n  cruise_line[item[0]] = i\n  i += 1\n\ncruise_line_code = udf(lambda x:cruise_line[x])\ndata = data.withColumn('Cruise_line_code',cruise_line_code(data['Cruise_line']).cast('Integer'))\n","commandVersion":0,"state":"finished","results":null,"errorSummary":"org.apache.spark.SparkException: Job aborted due to stage failure: Task 0 in stage 348.0 failed 1 times, most recent failure: Lost task 0.0 in stage 348.0 (TID 19699, localhost, executor driver): org.apache.spark.api.python.PythonException: Traceback (most recent call last):","error":null,"workflows":[],"startTime":0,"submitTime":1515754908490,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"jrandson@gmail.com","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"037e172c-aac1-48ce-940b-1128751745e5"},{"version":"CommandV1","origId":2041609508916553,"guid":"318c1c55-8d2c-405c-8b8b-0bfd872839c4","subtype":"command","commandType":"auto","position":4.5,"command":"columns = data.columns\nprint columns\ndata.printSchema()","commandVersion":0,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\">[&apos;Ship_name&apos;, &apos;Cruise_line&apos;, &apos;Age&apos;, &apos;Tonnage&apos;, &apos;passengers&apos;, &apos;length&apos;, &apos;cabins&apos;, &apos;passenger_density&apos;, &apos;crew&apos;]\nroot\n |-- Ship_name: string (nullable = true)\n |-- Cruise_line: string (nullable = true)\n |-- Age: integer (nullable = true)\n |-- Tonnage: double (nullable = true)\n |-- passengers: double (nullable = true)\n |-- length: double (nullable = true)\n |-- cabins: double (nullable = true)\n |-- passenger_density: double (nullable = true)\n |-- crew: double (nullable = true)\n\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":"org.apache.spark.SparkException: Job aborted due to stage failure: Task 0 in stage 266.0 failed 1 times, most recent failure: Lost task 0.0 in stage 266.0 (TID 14422, localhost, executor driver): org.apache.spark.api.python.PythonException: Traceback (most recent call last):","error":null,"workflows":[],"startTime":1515852706930,"submitTime":1515852706921,"finishTime":1515852707007,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"jrandson@gmail.com","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"f886d0fa-1953-47d5-ad79-c6b9980a7039"},{"version":"CommandV1","origId":2041609508916554,"guid":"44c70dfe-6fd8-408d-a6ef-ed79637a8faa","subtype":"command","commandType":"auto","position":7.0,"command":"columns = indexed.columns\nprint columns","commandVersion":0,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\">[&apos;Ship_name&apos;, &apos;Cruise_line&apos;, &apos;Age&apos;, &apos;Tonnage&apos;, &apos;passengers&apos;, &apos;length&apos;, &apos;cabins&apos;, &apos;passenger_density&apos;, &apos;crew&apos;, &apos;Cruise_line_code&apos;]\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":"Command skipped","error":null,"workflows":[],"startTime":1515852877698,"submitTime":1515852877691,"finishTime":1515852877771,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"jrandson@gmail.com","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"e5c6a6cb-6d0a-46bc-9b22-866c11ac547c"},{"version":"CommandV1","origId":2041609508916555,"guid":"2deb5752-7bae-41c9-ad02-a8f98f9915db","subtype":"command","commandType":"auto","position":8.0,"command":"from pyspark.ml.linalg import Vector\nfrom pyspark.ml.feature import VectorAssembler\n\ninput_data_cols = ['Age', 'Tonnage', 'passengers', 'length', 'cabins', 'passenger_density', 'Cruise_line_code']\nassembler = VectorAssembler(inputCols=input_data_cols, outputCol='features')\n\noutput = assembler.transform(indexed)\nfinal_data = output.select('features','crew')\n\nfinal_data.show()\n\n\n","commandVersion":0,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\">+--------------------+----+\n|            features|crew|\n+--------------------+----+\n|[6.0,30.276999999...|3.55|\n|[6.0,30.276999999...|3.55|\n|[26.0,47.262,14.8...| 6.7|\n|[11.0,110.0,29.74...|19.1|\n|[17.0,101.353,26....|10.0|\n|[22.0,70.367,20.5...| 9.2|\n|[15.0,70.367,20.5...| 9.2|\n|[23.0,70.367,20.5...| 9.2|\n|[19.0,70.367,20.5...| 9.2|\n|[6.0,110.23899999...|11.5|\n|[10.0,110.0,29.74...|11.6|\n|[28.0,46.052,14.5...| 6.6|\n|[18.0,70.367,20.5...| 9.2|\n|[17.0,70.367,20.5...| 9.2|\n|[11.0,86.0,21.24,...| 9.3|\n|[8.0,110.0,29.74,...|11.6|\n|[9.0,88.5,21.24,9...|10.3|\n|[15.0,70.367,20.5...| 9.2|\n|[12.0,88.5,21.24,...| 9.3|\n|[20.0,70.367,20.5...| 9.2|\n+--------------------+----+\nonly showing top 20 rows\n\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[{"name":"output","typeStr":"pyspark.sql.dataframe.DataFrame","schema":{"fields":[{"metadata":{},"name":"Ship_name","nullable":true,"type":"string"},{"metadata":{},"name":"Cruise_line","nullable":true,"type":"string"},{"metadata":{},"name":"Age","nullable":true,"type":"integer"},{"metadata":{},"name":"Tonnage","nullable":true,"type":"double"},{"metadata":{},"name":"passengers","nullable":true,"type":"double"},{"metadata":{},"name":"length","nullable":true,"type":"double"},{"metadata":{},"name":"cabins","nullable":true,"type":"double"},{"metadata":{},"name":"passenger_density","nullable":true,"type":"double"},{"metadata":{},"name":"crew","nullable":true,"type":"double"},{"metadata":{"ml_attr":{"name":"Cruise_line_code","type":"nominal","vals":["Royal_Caribbean","Carnival","Princess","Holland_American","Norwegian","Costa","Celebrity","MSC","Star","P&O","Regent_Seven_Seas","Silversea","Oceania","Seabourn","Windstar","Cunard","Azamara","Disney","Crystal","Orient"]}},"name":"Cruise_line_code","nullable":false,"type":"double"},{"metadata":{"ml_attr":{"attrs":{"nominal":[{"idx":6,"name":"Cruise_line_code","vals":["Royal_Caribbean","Carnival","Princess","Holland_American","Norwegian","Costa","Celebrity","MSC","Star","P&O","Regent_Seven_Seas","Silversea","Oceania","Seabourn","Windstar","Cunard","Azamara","Disney","Crystal","Orient"]}],"numeric":[{"idx":0,"name":"Age"},{"idx":1,"name":"Tonnage"},{"idx":2,"name":"passengers"},{"idx":3,"name":"length"},{"idx":4,"name":"cabins"},{"idx":5,"name":"passenger_density"}]},"num_attrs":7}},"name":"features","nullable":true,"type":{"class":"org.apache.spark.ml.linalg.VectorUDT","pyClass":"pyspark.ml.linalg.VectorUDT","sqlType":{"fields":[{"metadata":{},"name":"type","nullable":false,"type":"byte"},{"metadata":{},"name":"size","nullable":true,"type":"integer"},{"metadata":{},"name":"indices","nullable":true,"type":{"containsNull":false,"elementType":"integer","type":"array"}},{"metadata":{},"name":"values","nullable":true,"type":{"containsNull":false,"elementType":"double","type":"array"}}],"type":"struct"},"type":"udt"}}],"type":"struct"},"tableIdentifier":null},{"name":"final_data","typeStr":"pyspark.sql.dataframe.DataFrame","schema":{"fields":[{"metadata":{"ml_attr":{"attrs":{"nominal":[{"idx":6,"name":"Cruise_line_code","vals":["Royal_Caribbean","Carnival","Princess","Holland_American","Norwegian","Costa","Celebrity","MSC","Star","P&O","Regent_Seven_Seas","Silversea","Oceania","Seabourn","Windstar","Cunard","Azamara","Disney","Crystal","Orient"]}],"numeric":[{"idx":0,"name":"Age"},{"idx":1,"name":"Tonnage"},{"idx":2,"name":"passengers"},{"idx":3,"name":"length"},{"idx":4,"name":"cabins"},{"idx":5,"name":"passenger_density"}]},"num_attrs":7}},"name":"features","nullable":true,"type":{"class":"org.apache.spark.ml.linalg.VectorUDT","pyClass":"pyspark.ml.linalg.VectorUDT","sqlType":{"fields":[{"metadata":{},"name":"type","nullable":false,"type":"byte"},{"metadata":{},"name":"size","nullable":true,"type":"integer"},{"metadata":{},"name":"indices","nullable":true,"type":{"containsNull":false,"elementType":"integer","type":"array"}},{"metadata":{},"name":"values","nullable":true,"type":{"containsNull":false,"elementType":"double","type":"array"}}],"type":"struct"},"type":"udt"}},{"metadata":{},"name":"crew","nullable":true,"type":"double"}],"type":"struct"},"tableIdentifier":null}]},"errorSummary":"<span class=\"ansired\">TypeError</span>: Invalid param value given for param &quot;inputCols&quot;. Could not convert [[&apos;Age&apos;, &apos;Tonnage&apos;, &apos;passengers&apos;, &apos;length&apos;, &apos;cabins&apos;, &apos;passenger_density&apos;, &apos;Cruise_line_code&apos;]] to list of strings","error":"<div class=\"ansiout\"><span class=\"ansired\">---------------------------------------------------------------------------</span>\n<span class=\"ansired\">TypeError</span>                                 Traceback (most recent call last)\n<span class=\"ansigreen\">&lt;command-2041609508916555&gt;</span> in <span class=\"ansicyan\">&lt;module&gt;</span><span class=\"ansiblue\">()</span>\n<span class=\"ansigreen\">      3</span> <span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">      4</span> input_data_cols <span class=\"ansiyellow\">=</span> <span class=\"ansiyellow\">[</span><span class=\"ansiblue\">&apos;Age&apos;</span><span class=\"ansiyellow\">,</span> <span class=\"ansiblue\">&apos;Tonnage&apos;</span><span class=\"ansiyellow\">,</span> <span class=\"ansiblue\">&apos;passengers&apos;</span><span class=\"ansiyellow\">,</span> <span class=\"ansiblue\">&apos;length&apos;</span><span class=\"ansiyellow\">,</span> <span class=\"ansiblue\">&apos;cabins&apos;</span><span class=\"ansiyellow\">,</span> <span class=\"ansiblue\">&apos;passenger_density&apos;</span><span class=\"ansiyellow\">,</span> <span class=\"ansiblue\">&apos;Cruise_line_code&apos;</span><span class=\"ansiyellow\">]</span><span class=\"ansiyellow\">,</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">----&gt; 5</span><span class=\"ansiyellow\"> </span>assembler <span class=\"ansiyellow\">=</span> VectorAssembler<span class=\"ansiyellow\">(</span>inputCols<span class=\"ansiyellow\">=</span>input_data_cols<span class=\"ansiyellow\">,</span> outputCol<span class=\"ansiyellow\">=</span><span class=\"ansiblue\">&apos;features&apos;</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">      6</span> <span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">      7</span> output <span class=\"ansiyellow\">=</span> assembler<span class=\"ansiyellow\">.</span>transform<span class=\"ansiyellow\">(</span>indexed<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n\n<span class=\"ansigreen\">/databricks/spark/python/pyspark/__init__.py</span> in <span class=\"ansicyan\">wrapper</span><span class=\"ansiblue\">(self, *args, **kwargs)</span>\n<span class=\"ansigreen\">    102</span>             <span class=\"ansigreen\">raise</span> TypeError<span class=\"ansiyellow\">(</span><span class=\"ansiblue\">&quot;Method %s forces keyword arguments.&quot;</span> <span class=\"ansiyellow\">%</span> func<span class=\"ansiyellow\">.</span>__name__<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">    103</span>         self<span class=\"ansiyellow\">.</span>_input_kwargs <span class=\"ansiyellow\">=</span> kwargs<span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">--&gt; 104</span><span class=\"ansiyellow\">         </span><span class=\"ansigreen\">return</span> func<span class=\"ansiyellow\">(</span>self<span class=\"ansiyellow\">,</span> <span class=\"ansiyellow\">**</span>kwargs<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">    105</span>     <span class=\"ansigreen\">return</span> wrapper<span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">    106</span> <span class=\"ansiyellow\"></span>\n\n<span class=\"ansigreen\">/databricks/spark/python/pyspark/ml/feature.py</span> in <span class=\"ansicyan\">__init__</span><span class=\"ansiblue\">(self, inputCols, outputCol)</span>\n<span class=\"ansigreen\">   2384</span>         self<span class=\"ansiyellow\">.</span>_java_obj <span class=\"ansiyellow\">=</span> self<span class=\"ansiyellow\">.</span>_new_java_obj<span class=\"ansiyellow\">(</span><span class=\"ansiblue\">&quot;org.apache.spark.ml.feature.VectorAssembler&quot;</span><span class=\"ansiyellow\">,</span> self<span class=\"ansiyellow\">.</span>uid<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">   2385</span>         kwargs <span class=\"ansiyellow\">=</span> self<span class=\"ansiyellow\">.</span>_input_kwargs<span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">-&gt; 2386</span><span class=\"ansiyellow\">         </span>self<span class=\"ansiyellow\">.</span>setParams<span class=\"ansiyellow\">(</span><span class=\"ansiyellow\">**</span>kwargs<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">   2387</span> <span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">   2388</span>     <span class=\"ansiyellow\">@</span>keyword_only<span class=\"ansiyellow\"></span>\n\n<span class=\"ansigreen\">/databricks/spark/python/pyspark/__init__.py</span> in <span class=\"ansicyan\">wrapper</span><span class=\"ansiblue\">(self, *args, **kwargs)</span>\n<span class=\"ansigreen\">    102</span>             <span class=\"ansigreen\">raise</span> TypeError<span class=\"ansiyellow\">(</span><span class=\"ansiblue\">&quot;Method %s forces keyword arguments.&quot;</span> <span class=\"ansiyellow\">%</span> func<span class=\"ansiyellow\">.</span>__name__<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">    103</span>         self<span class=\"ansiyellow\">.</span>_input_kwargs <span class=\"ansiyellow\">=</span> kwargs<span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">--&gt; 104</span><span class=\"ansiyellow\">         </span><span class=\"ansigreen\">return</span> func<span class=\"ansiyellow\">(</span>self<span class=\"ansiyellow\">,</span> <span class=\"ansiyellow\">**</span>kwargs<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">    105</span>     <span class=\"ansigreen\">return</span> wrapper<span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">    106</span> <span class=\"ansiyellow\"></span>\n\n<span class=\"ansigreen\">/databricks/spark/python/pyspark/ml/feature.py</span> in <span class=\"ansicyan\">setParams</span><span class=\"ansiblue\">(self, inputCols, outputCol)</span>\n<span class=\"ansigreen\">   2394</span>         &quot;&quot;&quot;\n<span class=\"ansigreen\">   2395</span>         kwargs <span class=\"ansiyellow\">=</span> self<span class=\"ansiyellow\">.</span>_input_kwargs<span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">-&gt; 2396</span><span class=\"ansiyellow\">         </span><span class=\"ansigreen\">return</span> self<span class=\"ansiyellow\">.</span>_set<span class=\"ansiyellow\">(</span><span class=\"ansiyellow\">**</span>kwargs<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">   2397</span> <span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">   2398</span> <span class=\"ansiyellow\"></span>\n\n<span class=\"ansigreen\">/databricks/spark/python/pyspark/ml/param/__init__.py</span> in <span class=\"ansicyan\">_set</span><span class=\"ansiblue\">(self, **kwargs)</span>\n<span class=\"ansigreen\">    419</span>                     value <span class=\"ansiyellow\">=</span> p<span class=\"ansiyellow\">.</span>typeConverter<span class=\"ansiyellow\">(</span>value<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">    420</span>                 <span class=\"ansigreen\">except</span> TypeError <span class=\"ansigreen\">as</span> e<span class=\"ansiyellow\">:</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">--&gt; 421</span><span class=\"ansiyellow\">                     </span><span class=\"ansigreen\">raise</span> TypeError<span class=\"ansiyellow\">(</span><span class=\"ansiblue\">&apos;Invalid param value given for param &quot;%s&quot;. %s&apos;</span> <span class=\"ansiyellow\">%</span> <span class=\"ansiyellow\">(</span>p<span class=\"ansiyellow\">.</span>name<span class=\"ansiyellow\">,</span> e<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">    422</span>             self<span class=\"ansiyellow\">.</span>_paramMap<span class=\"ansiyellow\">[</span>p<span class=\"ansiyellow\">]</span> <span class=\"ansiyellow\">=</span> value<span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">    423</span>         <span class=\"ansigreen\">return</span> self<span class=\"ansiyellow\"></span>\n\n<span class=\"ansired\">TypeError</span>: Invalid param value given for param &quot;inputCols&quot;. Could not convert [[&apos;Age&apos;, &apos;Tonnage&apos;, &apos;passengers&apos;, &apos;length&apos;, &apos;cabins&apos;, &apos;passenger_density&apos;, &apos;Cruise_line_code&apos;]] to list of strings</div>","workflows":[],"startTime":1515852958008,"submitTime":1515852958002,"finishTime":1515852958593,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"jrandson@gmail.com","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"920040d2-bce6-401a-a47c-7025201e186a"},{"version":"CommandV1","origId":2041609508916556,"guid":"bba917dc-a367-4b8c-ab2f-7834bc6439f8","subtype":"command","commandType":"auto","position":4.75,"command":"cruise_line_df = data.groupBy(['Ship_name']).count().orderBy('count').select('Ship_name','count')\ncruise_line_df.show()","commandVersion":0,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\">+------------+-----+\n|   Ship_name|count|\n+------------+-----+\n|   Adventure|    1|\n|    Sovreign|    1|\n|       Virgo|    1|\n|     Fortuna|    1|\n|    Paradise|    1|\n|        Surf|    1|\n|      Wonder|    1|\n|      Shadow|    1|\n|     Empress|    1|\n|       Magic|    1|\n|    Sinfonia|    1|\n| Inspiration|    1|\n|   Millenium|    1|\n|    Solstice|    1|\n|   Romantica|    1|\n|    Symphony|    1|\n|     Ventura|    1|\n|PrideofAloha|    1|\n|       Oasis|    1|\n|       Valor|    1|\n+------------+-----+\nonly showing top 20 rows\n\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[{"name":"cruise_line_df","typeStr":"pyspark.sql.dataframe.DataFrame","schema":{"fields":[{"metadata":{},"name":"Ship_name","nullable":true,"type":"string"},{"metadata":{},"name":"count","nullable":false,"type":"long"}],"type":"struct"},"tableIdentifier":null}]},"errorSummary":"org.apache.spark.SparkException: Job aborted due to stage failure: Task 0 in stage 297.0 failed 1 times, most recent failure: Lost task 0.0 in stage 297.0 (TID 16452, localhost, executor driver): org.apache.spark.api.python.PythonException: Traceback (most recent call last):","error":null,"workflows":[],"startTime":1515852710302,"submitTime":1515852710289,"finishTime":1515852712733,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"jrandson@gmail.com","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"75e7f728-cafb-4727-bdd5-218879932f32"},{"version":"CommandV1","origId":2041609508916559,"guid":"a83f3fe9-f8e5-4344-bbad-8a18f6c4c160","subtype":"command","commandType":"auto","position":8.5,"command":"data.printSchema()","commandVersion":0,"state":"finished","results":null,"errorSummary":"Command skipped","error":null,"workflows":[],"startTime":0,"submitTime":1515754909140,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"jrandson@gmail.com","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"9746a393-758b-48c2-9e55-bcbb318e2516"},{"version":"CommandV1","origId":2041609508916562,"guid":"cdcad254-0cd9-4ef5-89bf-62ce41154a1e","subtype":"command","commandType":"auto","position":12.0,"command":"train_data, test_data = final_data.randomSplit([.7, .3])\ntrain_data.describe().show()\ntest_data.describe().show()","commandVersion":0,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\">+-------+------------------+\n|summary|              crew|\n+-------+------------------+\n|  count|               120|\n|   mean|  7.84325000000001|\n| stddev|3.6590771584185675|\n|    min|              0.59|\n|    max|              21.0|\n+-------+------------------+\n\n+-------+-----------------+\n|summary|             crew|\n+-------+-----------------+\n|  count|               38|\n|   mean|7.639210526315789|\n| stddev|2.998240368254712|\n|    min|             0.88|\n|    max|             13.6|\n+-------+-----------------+\n\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[{"name":"train_data","typeStr":"pyspark.sql.dataframe.DataFrame","schema":{"fields":[{"metadata":{"ml_attr":{"attrs":{"nominal":[{"idx":6,"name":"Cruise_line_code","vals":["Royal_Caribbean","Carnival","Princess","Holland_American","Norwegian","Costa","Celebrity","MSC","Star","P&O","Regent_Seven_Seas","Silversea","Oceania","Seabourn","Windstar","Cunard","Azamara","Disney","Crystal","Orient"]}],"numeric":[{"idx":0,"name":"Age"},{"idx":1,"name":"Tonnage"},{"idx":2,"name":"passengers"},{"idx":3,"name":"length"},{"idx":4,"name":"cabins"},{"idx":5,"name":"passenger_density"}]},"num_attrs":7}},"name":"features","nullable":true,"type":{"class":"org.apache.spark.ml.linalg.VectorUDT","pyClass":"pyspark.ml.linalg.VectorUDT","sqlType":{"fields":[{"metadata":{},"name":"type","nullable":false,"type":"byte"},{"metadata":{},"name":"size","nullable":true,"type":"integer"},{"metadata":{},"name":"indices","nullable":true,"type":{"containsNull":false,"elementType":"integer","type":"array"}},{"metadata":{},"name":"values","nullable":true,"type":{"containsNull":false,"elementType":"double","type":"array"}}],"type":"struct"},"type":"udt"}},{"metadata":{},"name":"crew","nullable":true,"type":"double"}],"type":"struct"},"tableIdentifier":null},{"name":"test_data","typeStr":"pyspark.sql.dataframe.DataFrame","schema":{"fields":[{"metadata":{"ml_attr":{"attrs":{"nominal":[{"idx":6,"name":"Cruise_line_code","vals":["Royal_Caribbean","Carnival","Princess","Holland_American","Norwegian","Costa","Celebrity","MSC","Star","P&O","Regent_Seven_Seas","Silversea","Oceania","Seabourn","Windstar","Cunard","Azamara","Disney","Crystal","Orient"]}],"numeric":[{"idx":0,"name":"Age"},{"idx":1,"name":"Tonnage"},{"idx":2,"name":"passengers"},{"idx":3,"name":"length"},{"idx":4,"name":"cabins"},{"idx":5,"name":"passenger_density"}]},"num_attrs":7}},"name":"features","nullable":true,"type":{"class":"org.apache.spark.ml.linalg.VectorUDT","pyClass":"pyspark.ml.linalg.VectorUDT","sqlType":{"fields":[{"metadata":{},"name":"type","nullable":false,"type":"byte"},{"metadata":{},"name":"size","nullable":true,"type":"integer"},{"metadata":{},"name":"indices","nullable":true,"type":{"containsNull":false,"elementType":"integer","type":"array"}},{"metadata":{},"name":"values","nullable":true,"type":{"containsNull":false,"elementType":"double","type":"array"}}],"type":"struct"},"type":"udt"}},{"metadata":{},"name":"crew","nullable":true,"type":"double"}],"type":"struct"},"tableIdentifier":null}]},"errorSummary":"<span class=\"ansired\">NameError</span>: name &apos;test_date&apos; is not defined","error":null,"workflows":[],"startTime":1515852999045,"submitTime":1515852999037,"finishTime":1515853000266,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"jrandson@gmail.com","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"5854eadb-7814-47c4-b3c2-3481e488c9ee"},{"version":"CommandV1","origId":2041609508916563,"guid":"61dded75-cee5-499f-b754-695ada2e2c59","subtype":"command","commandType":"auto","position":13.0,"command":"from pyspark.ml.regression import LinearRegression\nlr = LinearRegression(featuresCol='features', labelCol='crew', predictionCol='predictionCol')","commandVersion":0,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":"org.apache.spark.SparkException: Job aborted due to stage failure: Task 0 in stage 360.0 failed 1 times, most recent failure: Lost task 0.0 in stage 360.0 (TID 20310, localhost, executor driver): org.apache.spark.api.python.PythonException: Traceback (most recent call last):","error":null,"workflows":[],"startTime":1515853132835,"submitTime":1515853132819,"finishTime":1515853132959,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"jrandson@gmail.com","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"ef02ff0b-34bf-4f89-97f5-30af41c0a7b1"},{"version":"CommandV1","origId":2041609508916565,"guid":"b9f68cbc-7c80-4bbe-a5ec-1a4fdd1e2de5","subtype":"command","commandType":"auto","position":14.0,"command":"lr_model = lr.fit(train_data)","commandVersion":0,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":"<span class=\"ansired\">NameError</span>: name &apos;lr&apos; is not defined","error":"<div class=\"ansiout\"><span class=\"ansired\">---------------------------------------------------------------------------</span>\n<span class=\"ansired\">NameError</span>                                 Traceback (most recent call last)\n<span class=\"ansigreen\">&lt;command-2041609508916565&gt;</span> in <span class=\"ansicyan\">&lt;module&gt;</span><span class=\"ansiblue\">()</span>\n<span class=\"ansigreen\">----&gt; 1</span><span class=\"ansiyellow\"> </span>lr_model <span class=\"ansiyellow\">=</span> lr<span class=\"ansiyellow\">.</span>fit<span class=\"ansiyellow\">(</span>train_data<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n\n<span class=\"ansired\">NameError</span>: name &apos;lr&apos; is not defined</div>","workflows":[],"startTime":1515853135117,"submitTime":1515853135110,"finishTime":1515853136631,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"jrandson@gmail.com","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"180475e8-86d8-42eb-b438-0f408e4f18a2"},{"version":"CommandV1","origId":2041609508916566,"guid":"12302581-aebd-461f-b78d-da25e19688f5","subtype":"command","commandType":"auto","position":15.0,"command":"test_result = lr_model.evaluate(test_data)\n\nprint \"Mean Suqared Error:\", test_result.meanSquaredError\nprint \"R²: \", test_result.r2\nprint \"RootMeanSquarerError:\", test_result.rootMeanSquaredError\nprint \"MeanAbsoluteError:\", test_result.meanAbsoluteError\n#test_result.residuals.show()\n\n","commandVersion":0,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\">Mean Suqared Error: 0.4291505095\nR²:  0.950970370593\nRootMeanSquarerError: 0.655095801773\nMeanAbsoluteError: 0.557144027078\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":"<span class=\"ansired\">SyntaxError</span><span class=\"ansired\">:</span> invalid syntax","error":null,"workflows":[],"startTime":1515853344379,"submitTime":1515853344374,"finishTime":1515853345992,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"jrandson@gmail.com","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"1e5cbcb3-f508-4fcf-8e4b-6c95655f2aec"},{"version":"CommandV1","origId":2041609508916567,"guid":"4a5eb93a-e9f9-4166-b1b9-bec424393751","subtype":"command","commandType":"auto","position":16.0,"command":"unlabeled_data = test_data.select('features')\nunlabeled_data.show()","commandVersion":0,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\">+--------------------+\n|            features|\n+--------------------+\n|[5.0,160.0,36.34,...|\n|[6.0,30.276999999...|\n|[6.0,30.276999999...|\n|[7.0,116.0,31.0,9...|\n|[7.0,158.0,43.7,1...|\n|[8.0,91.0,22.44,9...|\n|[9.0,59.058,17.0,...|\n|[9.0,81.0,21.44,9...|\n|[10.0,86.0,21.14,...|\n|[10.0,90.09,25.01...|\n|[10.0,91.62700000...|\n|[12.0,58.6,15.66,...|\n|[12.0,88.5,21.24,...|\n|[12.0,90.09,25.01...|\n|[13.0,91.0,20.32,...|\n|[14.0,63.0,14.4,7...|\n|[14.0,101.509,27....|\n|[15.0,30.27699999...|\n|[15.0,70.367,20.5...|\n|[15.0,70.367,20.5...|\n+--------------------+\nonly showing top 20 rows\n\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[{"name":"unlabeled_data","typeStr":"pyspark.sql.dataframe.DataFrame","schema":{"fields":[{"metadata":{"ml_attr":{"attrs":{"nominal":[{"idx":6,"name":"Cruise_line_code","vals":["Royal_Caribbean","Carnival","Princess","Holland_American","Norwegian","Costa","Celebrity","MSC","Star","P&O","Regent_Seven_Seas","Silversea","Oceania","Seabourn","Windstar","Cunard","Azamara","Disney","Crystal","Orient"]}],"numeric":[{"idx":0,"name":"Age"},{"idx":1,"name":"Tonnage"},{"idx":2,"name":"passengers"},{"idx":3,"name":"length"},{"idx":4,"name":"cabins"},{"idx":5,"name":"passenger_density"}]},"num_attrs":7}},"name":"features","nullable":true,"type":{"class":"org.apache.spark.ml.linalg.VectorUDT","pyClass":"pyspark.ml.linalg.VectorUDT","sqlType":{"fields":[{"metadata":{},"name":"type","nullable":false,"type":"byte"},{"metadata":{},"name":"size","nullable":true,"type":"integer"},{"metadata":{},"name":"indices","nullable":true,"type":{"containsNull":false,"elementType":"integer","type":"array"}},{"metadata":{},"name":"values","nullable":true,"type":{"containsNull":false,"elementType":"double","type":"array"}}],"type":"struct"},"type":"udt"}}],"type":"struct"},"tableIdentifier":null}]},"errorSummary":"<span class=\"ansired\">NameError</span>: name &apos;test_result&apos; is not defined","error":null,"workflows":[],"startTime":1515853424889,"submitTime":1515853424882,"finishTime":1515853425217,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"jrandson@gmail.com","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"21af9ee1-c2fa-45e3-b72b-40259052e30c"},{"version":"CommandV1","origId":2041609508916568,"guid":"a72c5b08-126f-4c42-941f-5b3d58c6818c","subtype":"command","commandType":"auto","position":17.0,"command":"predictions = lr_model.transform(unlabeled_data)\npredictions.show()","commandVersion":0,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\">+--------------------+------------------+\n|            features|     predictionCol|\n+--------------------+------------------+\n|[5.0,160.0,36.34,...| 15.10657948823217|\n|[6.0,30.276999999...| 4.580288952377565|\n|[6.0,30.276999999...| 4.580288952377565|\n|[7.0,116.0,31.0,9...| 12.71411132688456|\n|[7.0,158.0,43.7,1...|13.910329404114368|\n|[8.0,91.0,22.44,9...|10.137165906160021|\n|[9.0,59.058,17.0,...| 7.721071057226027|\n|[9.0,81.0,21.44,9...| 9.584418017113354|\n|[10.0,86.0,21.14,...| 9.710960777740624|\n|[10.0,90.09,25.01...|  8.91538082837341|\n|[10.0,91.62700000...|  9.20164262457809|\n|[12.0,58.6,15.66,...| 7.492377972648623|\n|[12.0,88.5,21.24,...| 9.461723759182645|\n|[12.0,90.09,25.01...|   8.8751430833768|\n|[13.0,91.0,20.32,...| 9.195019650539301|\n|[14.0,63.0,14.4,7...| 6.708727458251075|\n|[14.0,101.509,27....| 10.65768811441847|\n|[15.0,30.27699999...| 4.064903070854119|\n|[15.0,70.367,20.5...| 8.649302495712023|\n|[15.0,70.367,20.5...| 8.649302495712023|\n+--------------------+------------------+\nonly showing top 20 rows\n\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[{"name":"predictions","typeStr":"pyspark.sql.dataframe.DataFrame","schema":{"fields":[{"metadata":{"ml_attr":{"attrs":{"nominal":[{"idx":6,"name":"Cruise_line_code","vals":["Royal_Caribbean","Carnival","Princess","Holland_American","Norwegian","Costa","Celebrity","MSC","Star","P&O","Regent_Seven_Seas","Silversea","Oceania","Seabourn","Windstar","Cunard","Azamara","Disney","Crystal","Orient"]}],"numeric":[{"idx":0,"name":"Age"},{"idx":1,"name":"Tonnage"},{"idx":2,"name":"passengers"},{"idx":3,"name":"length"},{"idx":4,"name":"cabins"},{"idx":5,"name":"passenger_density"}]},"num_attrs":7}},"name":"features","nullable":true,"type":{"class":"org.apache.spark.ml.linalg.VectorUDT","pyClass":"pyspark.ml.linalg.VectorUDT","sqlType":{"fields":[{"metadata":{},"name":"type","nullable":false,"type":"byte"},{"metadata":{},"name":"size","nullable":true,"type":"integer"},{"metadata":{},"name":"indices","nullable":true,"type":{"containsNull":false,"elementType":"integer","type":"array"}},{"metadata":{},"name":"values","nullable":true,"type":{"containsNull":false,"elementType":"double","type":"array"}}],"type":"struct"},"type":"udt"}},{"metadata":{},"name":"predictionCol","nullable":false,"type":"double"}],"type":"struct"},"tableIdentifier":null}]},"errorSummary":null,"error":null,"workflows":[],"startTime":1515853428011,"submitTime":1515853428004,"finishTime":1515853428347,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"jrandson@gmail.com","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"fae088f6-17ee-45c4-a8cc-4620f39673cf"},{"version":"CommandV1","origId":2375083902980548,"guid":"9e573864-c1e0-4c6c-9c99-fac8b6316692","subtype":"command","commandType":"auto","position":18.0,"command":"","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"70ce7d9c-70e7-481f-8b6a-3cdb34ebc0a0"},{"version":"CommandV1","origId":2581020348981794,"guid":"23fbd383-7c6e-450a-8d96-fa409b14012c","subtype":"command","commandType":"auto","position":1.0,"command":"%md # Linear Regression Consulting Project","commandVersion":1,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1515753155366,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"jrandson@gmail.com","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{},"streamStates":{},"nuid":"2558b84e-7470-4509-80e6-a944e2874eb6"},{"version":"CommandV1","origId":2581020348981795,"guid":"57ef8016-2ceb-4b03-995e-6e75366049e7","subtype":"command","commandType":"auto","position":2.0,"command":"%md Congratulations! You've been contracted by Hyundai Heavy Industries to help them build a predictive model for some ships. [Hyundai Heavy Industries](http://www.hyundai.eu/en) is one of the world's largest ship manufacturing companies and builds cruise liners.\n\nYou've been flown to their headquarters in Ulsan, South Korea to help them give accurate estimates of how many crew members a ship will require.\n\nThey are currently building new ships for some customers and want you to create a model and use it to predict how many crew members the ships will need.\n\nHere is what the data looks like so far:\n\n    Description: Measurements of ship size, capacity, crew, and age for 158 cruise\n    ships.\n\n\n    Variables/Columns\n    Ship Name     1-20\n    Cruise Line   21-40\n    Age (as of 2013)   46-48\n    Tonnage (1000s of tons)   50-56\n    passengers (100s)   58-64\n    Length (100s of feet)  66-72\n    Cabins  (100s)   74-80\n    Passenger Density   82-88\n    Crew  (100s)   90-96\n    \nIt is saved in a csv file for you called \"cruise_ship_info.csv\". Your job is to create a regression model that will help predict how many crew members will be needed for future ships. The client also mentioned that they have found that particular cruise lines will differ in acceptable crew counts, so it is most likely an important feature to include in your analysis! \n\nOnce you've created the model and tested it for a quick check on how well you can expect it to perform, make sure you take a look at why it performs so well!","commandVersion":1,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1515753155508,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"jrandson@gmail.com","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":{"collapsed":true},"streamStates":{},"nuid":"fd36e855-5391-42d5-a059-eb1c7d11dc8b"},{"version":"CommandV1","origId":3632859077491967,"guid":"559669ef-068d-4fe9-86ce-89ec29bb5bc6","subtype":"command","commandType":"auto","position":5.5,"command":"from pyspark.ml.feature import StringIndexer\nindexer =  StringIndexer(inputCol='Cruise_line', outputCol = 'Cruise_line_code')\nindexed = indexer.fit(data).transform(data)\nindexed.show()","commandVersion":0,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\">+-----------+-----------+---+------------------+----------+------+------+-----------------+----+----------------+\n|  Ship_name|Cruise_line|Age|           Tonnage|passengers|length|cabins|passenger_density|crew|Cruise_line_code|\n+-----------+-----------+---+------------------+----------+------+------+-----------------+----+----------------+\n|    Journey|    Azamara|  6|30.276999999999997|      6.94|  5.94|  3.55|            42.64|3.55|            16.0|\n|      Quest|    Azamara|  6|30.276999999999997|      6.94|  5.94|  3.55|            42.64|3.55|            16.0|\n|Celebration|   Carnival| 26|            47.262|     14.86|  7.22|  7.43|             31.8| 6.7|             1.0|\n|   Conquest|   Carnival| 11|             110.0|     29.74|  9.53| 14.88|            36.99|19.1|             1.0|\n|    Destiny|   Carnival| 17|           101.353|     26.42|  8.92| 13.21|            38.36|10.0|             1.0|\n|    Ecstasy|   Carnival| 22|            70.367|     20.52|  8.55|  10.2|            34.29| 9.2|             1.0|\n|    Elation|   Carnival| 15|            70.367|     20.52|  8.55|  10.2|            34.29| 9.2|             1.0|\n|    Fantasy|   Carnival| 23|            70.367|     20.56|  8.55| 10.22|            34.23| 9.2|             1.0|\n|Fascination|   Carnival| 19|            70.367|     20.52|  8.55|  10.2|            34.29| 9.2|             1.0|\n|    Freedom|   Carnival|  6|110.23899999999999|      37.0|  9.51| 14.87|            29.79|11.5|             1.0|\n|      Glory|   Carnival| 10|             110.0|     29.74|  9.51| 14.87|            36.99|11.6|             1.0|\n|    Holiday|   Carnival| 28|            46.052|     14.52|  7.27|  7.26|            31.72| 6.6|             1.0|\n|Imagination|   Carnival| 18|            70.367|     20.52|  8.55|  10.2|            34.29| 9.2|             1.0|\n|Inspiration|   Carnival| 17|            70.367|     20.52|  8.55|  10.2|            34.29| 9.2|             1.0|\n|     Legend|   Carnival| 11|              86.0|     21.24|  9.63| 10.62|            40.49| 9.3|             1.0|\n|   Liberty*|   Carnival|  8|             110.0|     29.74|  9.51| 14.87|            36.99|11.6|             1.0|\n|    Miracle|   Carnival|  9|              88.5|     21.24|  9.63| 10.62|            41.67|10.3|             1.0|\n|   Paradise|   Carnival| 15|            70.367|     20.52|  8.55|  10.2|            34.29| 9.2|             1.0|\n|      Pride|   Carnival| 12|              88.5|     21.24|  9.63| 11.62|            41.67| 9.3|             1.0|\n|  Sensation|   Carnival| 20|            70.367|     20.52|  8.55|  10.2|            34.29| 9.2|             1.0|\n+-----------+-----------+---+------------------+----------+------+------+-----------------+----+----------------+\nonly showing top 20 rows\n\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[{"name":"indexed","typeStr":"pyspark.sql.dataframe.DataFrame","schema":{"fields":[{"metadata":{},"name":"Ship_name","nullable":true,"type":"string"},{"metadata":{},"name":"Cruise_line","nullable":true,"type":"string"},{"metadata":{},"name":"Age","nullable":true,"type":"integer"},{"metadata":{},"name":"Tonnage","nullable":true,"type":"double"},{"metadata":{},"name":"passengers","nullable":true,"type":"double"},{"metadata":{},"name":"length","nullable":true,"type":"double"},{"metadata":{},"name":"cabins","nullable":true,"type":"double"},{"metadata":{},"name":"passenger_density","nullable":true,"type":"double"},{"metadata":{},"name":"crew","nullable":true,"type":"double"},{"metadata":{"ml_attr":{"name":"Cruise_line_code","type":"nominal","vals":["Royal_Caribbean","Carnival","Princess","Holland_American","Norwegian","Costa","Celebrity","MSC","Star","P&O","Regent_Seven_Seas","Silversea","Oceania","Seabourn","Windstar","Cunard","Azamara","Disney","Crystal","Orient"]}},"name":"Cruise_line_code","nullable":false,"type":"double"}],"type":"struct"},"tableIdentifier":null}]},"errorSummary":"<span class=\"ansired\">SyntaxError</span><span class=\"ansired\">:</span> invalid syntax","error":"<div class=\"ansiout\"><span class=\"ansicyan\">  File </span><span class=\"ansigreen\">&quot;&lt;command-3632859077491967&gt;&quot;</span><span class=\"ansicyan\">, line </span><span class=\"ansigreen\">4</span>\n<span class=\"ansiyellow\">    indexed..show()</span>\n<span class=\"ansigrey\">            ^</span>\n<span class=\"ansired\">SyntaxError</span><span class=\"ansired\">:</span> invalid syntax\n</div>","workflows":[],"startTime":1515852850268,"submitTime":1515852850264,"finishTime":1515852850749,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"jrandson@gmail.com","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"26a9c5e8-6fcc-4bc1-9618-a6d218c64032"},{"version":"CommandV1","origId":3632859077491970,"guid":"208ef763-ccdd-4226-bd80-51b46056720c","subtype":"command","commandType":"auto","position":15.5,"command":"from pyspark.sql.functions import corr\nprint indexed.columns\nindexed.select(corr('crew','passengers').alias('pass x crew'), corr('crew','Age').alias('age x crew'), corr('crew','passenger_density').alias('pass x pass_dens'), corr('crew','Cruise_line_code').alias('pass x cruise_line'), corr('crew','Tonnage').alias('pass x tonn'), corr('crew','length').alias('pass x length'),\n              corr('crew','cabins').alias('pass x cabins')).show()","commandVersion":0,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\">[&apos;Ship_name&apos;, &apos;Cruise_line&apos;, &apos;Age&apos;, &apos;Tonnage&apos;, &apos;passengers&apos;, &apos;length&apos;, &apos;cabins&apos;, &apos;passenger_density&apos;, &apos;crew&apos;, &apos;Cruise_line_code&apos;]\n+------------------+-------------------+--------------------+--------------------+-----------------+------------------+------------------+\n|       pass x crew|         age x crew|    pass x pass_dens|  pass x cruise_line|      pass x tonn|     pass x length|     pass x cabins|\n+------------------+-------------------+--------------------+--------------------+-----------------+------------------+------------------+\n|0.9152341306065384|-0.5306565039638852|-0.15550928421699717|-0.48332562728617057|0.927568811544939|0.8958566271016579|0.9508226063578497|\n+------------------+-------------------+--------------------+--------------------+-----------------+------------------+------------------+\n\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":"<span class=\"ansired\">AnalysisException</span>: u&quot;cannot resolve &apos;&#96;Cruiseline_code&#96;&apos; given input columns: [crew, Tonnage, Ship_name, Cruise_line, length, Age, passengers, passenger_density, cabins, Cruise_line_code];;\\n&apos;Aggregate [corr(crew#27, passengers#23) AS pass x crew#1316, corr(crew#27, cast(Age#21 as double)) AS age x crew#1330, corr(crew#27, passenger_density#26) AS pass x pass_dens#1344, corr(crew#27, &apos;Cruiseline_code) AS pass x cruise_line#1358]\\n+- Project [Ship_name#19, Cruise_line#20, Age#21, Tonnage#22, passengers#23, length#24, cabins#25, passenger_density#26, crew#27, UDF(cast(Cruise_line#20 as string)) AS Cruise_line_code#200]\\n   +- Relation[Ship_name#19,Cruise_line#20,Age#21,Tonnage#22,passengers#23,length#24,cabins#25,passenger_density#26,crew#27] csv\\n&quot;","error":"<div class=\"ansiout\"><span class=\"ansired\">---------------------------------------------------------------------------</span>\n<span class=\"ansired\">AnalysisException</span>                         Traceback (most recent call last)\n<span class=\"ansigreen\">&lt;command-3632859077491970&gt;</span> in <span class=\"ansicyan\">&lt;module&gt;</span><span class=\"ansiblue\">()</span>\n<span class=\"ansigreen\">      1</span> <span class=\"ansigreen\">from</span> pyspark<span class=\"ansiyellow\">.</span>sql<span class=\"ansiyellow\">.</span>functions <span class=\"ansigreen\">import</span> corr<span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">      2</span> <span class=\"ansigreen\">print</span> indexed<span class=\"ansiyellow\">.</span>columns<span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">----&gt; 3</span><span class=\"ansiyellow\"> </span>indexed<span class=\"ansiyellow\">.</span>select<span class=\"ansiyellow\">(</span>corr<span class=\"ansiyellow\">(</span><span class=\"ansiblue\">&apos;crew&apos;</span><span class=\"ansiyellow\">,</span><span class=\"ansiblue\">&apos;passengers&apos;</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">.</span>alias<span class=\"ansiyellow\">(</span><span class=\"ansiblue\">&apos;pass x crew&apos;</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">,</span> corr<span class=\"ansiyellow\">(</span><span class=\"ansiblue\">&apos;crew&apos;</span><span class=\"ansiyellow\">,</span><span class=\"ansiblue\">&apos;Age&apos;</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">.</span>alias<span class=\"ansiyellow\">(</span><span class=\"ansiblue\">&apos;age x crew&apos;</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">,</span> corr<span class=\"ansiyellow\">(</span><span class=\"ansiblue\">&apos;crew&apos;</span><span class=\"ansiyellow\">,</span><span class=\"ansiblue\">&apos;passenger_density&apos;</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">.</span>alias<span class=\"ansiyellow\">(</span><span class=\"ansiblue\">&apos;pass x pass_dens&apos;</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">,</span> corr<span class=\"ansiyellow\">(</span><span class=\"ansiblue\">&apos;crew&apos;</span><span class=\"ansiyellow\">,</span><span class=\"ansiblue\">&apos;Cruiseline_code&apos;</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">.</span>alias<span class=\"ansiyellow\">(</span><span class=\"ansiblue\">&apos;pass x cruise_line&apos;</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">.</span>show<span class=\"ansiyellow\">(</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n\n<span class=\"ansigreen\">/databricks/spark/python/pyspark/sql/dataframe.py</span> in <span class=\"ansicyan\">select</span><span class=\"ansiblue\">(self, *cols)</span>\n<span class=\"ansigreen\">   1061</span>         <span class=\"ansiyellow\">[</span>Row<span class=\"ansiyellow\">(</span>name<span class=\"ansiyellow\">=</span><span class=\"ansiblue\">u&apos;Alice&apos;</span><span class=\"ansiyellow\">,</span> age<span class=\"ansiyellow\">=</span><span class=\"ansicyan\">12</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">,</span> Row<span class=\"ansiyellow\">(</span>name<span class=\"ansiyellow\">=</span><span class=\"ansiblue\">u&apos;Bob&apos;</span><span class=\"ansiyellow\">,</span> age<span class=\"ansiyellow\">=</span><span class=\"ansicyan\">15</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">]</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">   1062</span>         &quot;&quot;&quot;\n<span class=\"ansigreen\">-&gt; 1063</span><span class=\"ansiyellow\">         </span>jdf <span class=\"ansiyellow\">=</span> self<span class=\"ansiyellow\">.</span>_jdf<span class=\"ansiyellow\">.</span>select<span class=\"ansiyellow\">(</span>self<span class=\"ansiyellow\">.</span>_jcols<span class=\"ansiyellow\">(</span><span class=\"ansiyellow\">*</span>cols<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">   1064</span>         <span class=\"ansigreen\">return</span> DataFrame<span class=\"ansiyellow\">(</span>jdf<span class=\"ansiyellow\">,</span> self<span class=\"ansiyellow\">.</span>sql_ctx<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">   1065</span> <span class=\"ansiyellow\"></span>\n\n<span class=\"ansigreen\">/databricks/spark/python/lib/py4j-0.10.4-src.zip/py4j/java_gateway.py</span> in <span class=\"ansicyan\">__call__</span><span class=\"ansiblue\">(self, *args)</span>\n<span class=\"ansigreen\">   1131</span>         answer <span class=\"ansiyellow\">=</span> self<span class=\"ansiyellow\">.</span>gateway_client<span class=\"ansiyellow\">.</span>send_command<span class=\"ansiyellow\">(</span>command<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">   1132</span>         return_value = get_return_value(\n<span class=\"ansigreen\">-&gt; 1133</span><span class=\"ansiyellow\">             answer, self.gateway_client, self.target_id, self.name)\n</span><span class=\"ansigreen\">   1134</span> <span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">   1135</span>         <span class=\"ansigreen\">for</span> temp_arg <span class=\"ansigreen\">in</span> temp_args<span class=\"ansiyellow\">:</span><span class=\"ansiyellow\"></span>\n\n<span class=\"ansigreen\">/databricks/spark/python/pyspark/sql/utils.py</span> in <span class=\"ansicyan\">deco</span><span class=\"ansiblue\">(*a, **kw)</span>\n<span class=\"ansigreen\">     67</span>                                              e.java_exception.getStackTrace()))\n<span class=\"ansigreen\">     68</span>             <span class=\"ansigreen\">if</span> s<span class=\"ansiyellow\">.</span>startswith<span class=\"ansiyellow\">(</span><span class=\"ansiblue\">&apos;org.apache.spark.sql.AnalysisException: &apos;</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">:</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">---&gt; 69</span><span class=\"ansiyellow\">                 </span><span class=\"ansigreen\">raise</span> AnalysisException<span class=\"ansiyellow\">(</span>s<span class=\"ansiyellow\">.</span>split<span class=\"ansiyellow\">(</span><span class=\"ansiblue\">&apos;: &apos;</span><span class=\"ansiyellow\">,</span> <span class=\"ansicyan\">1</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">[</span><span class=\"ansicyan\">1</span><span class=\"ansiyellow\">]</span><span class=\"ansiyellow\">,</span> stackTrace<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">     70</span>             <span class=\"ansigreen\">if</span> s<span class=\"ansiyellow\">.</span>startswith<span class=\"ansiyellow\">(</span><span class=\"ansiblue\">&apos;org.apache.spark.sql.catalyst.analysis&apos;</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">:</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">     71</span>                 <span class=\"ansigreen\">raise</span> AnalysisException<span class=\"ansiyellow\">(</span>s<span class=\"ansiyellow\">.</span>split<span class=\"ansiyellow\">(</span><span class=\"ansiblue\">&apos;: &apos;</span><span class=\"ansiyellow\">,</span> <span class=\"ansicyan\">1</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">[</span><span class=\"ansicyan\">1</span><span class=\"ansiyellow\">]</span><span class=\"ansiyellow\">,</span> stackTrace<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n\n<span class=\"ansired\">AnalysisException</span>: u&quot;cannot resolve &apos;&#96;Cruiseline_code&#96;&apos; given input columns: [crew, Tonnage, Ship_name, Cruise_line, length, Age, passengers, passenger_density, cabins, Cruise_line_code];;\\n&apos;Aggregate [corr(crew#27, passengers#23) AS pass x crew#1316, corr(crew#27, cast(Age#21 as double)) AS age x crew#1330, corr(crew#27, passenger_density#26) AS pass x pass_dens#1344, corr(crew#27, &apos;Cruiseline_code) AS pass x cruise_line#1358]\\n+- Project [Ship_name#19, Cruise_line#20, Age#21, Tonnage#22, passengers#23, length#24, cabins#25, passenger_density#26, crew#27, UDF(cast(Cruise_line#20 as string)) AS Cruise_line_code#200]\\n   +- Relation[Ship_name#19,Cruise_line#20,Age#21,Tonnage#22,passengers#23,length#24,cabins#25,passenger_density#26,crew#27] csv\\n&quot;</div>","workflows":[],"startTime":1515853927773,"submitTime":1515853927771,"finishTime":1515853928252,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"jrandson@gmail.com","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"nuid":"0a89f956-2a6d-4443-8f75-44a6edaaf169"}],"dashboards":[],"guid":"83f1e323-4cd6-4e2e-b8c2-1a9c7ca8fe10","globalVars":{},"iPythonMetadata":{"nbformat":4,"IPythonMetadata":{"anaconda-cloud":{},"kernelspec":{"display_name":"Python [conda root]","language":"python","name":"conda-root-py"},"language_info":{"mimetype":"text/x-python","name":"python","pygments_lexer":"ipython3","codemirror_mode":{"name":"ipython","version":3},"version":"3.5.3","nbconvert_exporter":"python","file_extension":".py"}}},"inputWidgets":{}}